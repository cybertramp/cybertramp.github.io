<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Cybertramp Blog</title>
    <link>https://cybertramp.net/posts/</link>
    <description>Recent content in Posts on Cybertramp Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-kr</language>
    <lastBuildDate>Sun, 20 Mar 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://cybertramp.net/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>빌드가 안될때 해결법</title>
      <link>https://cybertramp.net/posts/20210116_001/</link>
      <pubDate>Sat, 16 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://cybertramp.net/posts/20210116_001/</guid>
      <description>PyQT5 빌드가 안될때 해결하는 방법이다. 빌드시 상대 경로가 문제인 경우에서의 해결 방법.
3699 WARNING: lib not found: api-ms-win-core-libraryloader-l1-2-0.dll dependency of C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.2288.0_x64__qbz5n2kfra8p0\python.exe 3704 WARNING: lib not found: api-ms-win-core-processthreads-l1-1-0.dll dependency of C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.2288.0_x64__qbz5n2kfra8p0\python.exe 3706 WARNING: lib not found: api-ms-win-core-util-l1-1-0.dll dependency of C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.2288.0_x64__qbz5n2kfra8p0\python.exe 3708 WARNING: lib not found: api-ms-win-core-errorhandling-l1-1-0.dll dependency of C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.2288.0_x64__qbz5n2kfra8p0\python.exe 3712 WARNING: lib not found: api-ms-win-core-sysinfo-l1-1-0.dll dependency of C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.2288.0_x64__qbz5n2kfra8p0\python.exe 3715 WARNING: lib not found: api-ms-win-core-interlocked-l1-1-0.dll dependency of C:\Program Files\WindowsApps\PythonSoftwareFoundation.</description>
    </item>
    
    <item>
      <title>Typora 정착</title>
      <link>https://cybertramp.net/posts/20220320_001/</link>
      <pubDate>Sun, 20 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://cybertramp.net/posts/20220320_001/</guid>
      <description>이번주 평일에 시간되면 작업하려 했던 블로그 작업을 일요일이 되어서야 겨우 마쳤다. 잘 버티다가 오미크론에 걸리게 되어 거의 아무것도 못하게됬다.
메뉴에 카테고리 넣기 뭐 어찌 어찌 답 없는 hugo의 Book | Hugo Themes (gohugo.io) 테마를 뜯어서 커스텀하게 만들었다. hugo는 GoLang의 Template이라는 모듈을 사용해서 문법이 조금 이해 하기 어렵다. 마치 bash를 보는듯했다. 그래도 hugo 문서랑 뒤적 거리면서 문서별 FrontMatter의 Category를 일일이 확인해서 메뉴에 분류되어 표시되게 해두었다.
 ▲ 내 포스트 글은 markdown으로 작성하고 맨 윗부분에 FrontMatter를 toml 형식으로 달아둔다.</description>
    </item>
    
    <item>
      <title>vue3 관련 정보</title>
      <link>https://cybertramp.net/posts/20220202_001/</link>
      <pubDate>Thu, 03 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>https://cybertramp.net/posts/20220202_001/</guid>
      <description>Vue3 관련 참고할만한 링크 들이다.
 Vue3 Boiler Plate  [VUE] 🌱우아한 프로젝트 구조 짜기 (velog.io)   라이브러리 추천  Vue 3 UI component library for 2021 - DEV Community   패키지 매니저의 히스토리  자바스크립트 패키지 매니저의 여정 | Clean Coder    Vue3 지원하는 프레임워크 지극히 개인적 의견임
  21.12.07 기준
 Ant Design for Vue (15.7k stars on GitHub)   별로&amp;hellip; 무거워 보임</description>
    </item>
    
    <item>
      <title>Vue3에서 webpack-bundle-analyzer 사용 방법</title>
      <link>https://cybertramp.net/posts/20220202_003/</link>
      <pubDate>Thu, 03 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>https://cybertramp.net/posts/20220202_003/</guid>
      <description>vue3에서 사용되는 라이브러리들의 용량을 한눈에 보게 해주는 webpack-bundle-analyzer 사용하기 위한 코드는 다음과 같다.
// vite.config.ts import { defineConfig } from &amp;#39;vite&amp;#39; import vue from &amp;#39;@vitejs/plugin-vue&amp;#39; import { visualizer } from &amp;#39;rollup-plugin-visualizer&amp;#39;;  export default defineConfig({  plugins: [vue(), visualizer()] }) </description>
    </item>
    
    <item>
      <title>WezTerm Configure</title>
      <link>https://cybertramp.net/posts/20220203_001/</link>
      <pubDate>Thu, 03 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>https://cybertramp.net/posts/20220203_001/</guid>
      <description>Wez&amp;rsquo;s Terminal Emulator의 Config file 이다.
lua 언어로 되어 있으며, 윈도우에서의 설정 파일 기본 위치는 C:\Program Files\WezTerm\wezterm.lua 이다.
설정 파일 참고: [참고](Lua Reference - Wez&amp;rsquo;s Terminal Emulator (wezfurlong.org))
아래는 내가 사용하는 Config 파일이다. (20220203 기준)
local wezterm = require &amp;#39;wezterm&amp;#39;;  return {  default_prog = {&amp;#34;C:\\Windows\\system32\\wsl.exe&amp;#34;, &amp;#34;-d&amp;#34;, &amp;#34;Ubuntu-20.04&amp;#34;},  font = wezterm.font(&amp;#34;D2Coding&amp;#34;),  font_size = 10.0,  color_scheme = &amp;#34;Dracula&amp;#34;,  launch_menu = { 	{ 	label = &amp;#34;Debugging PC&amp;#34;, 	args = {&amp;#34;ssh&amp;#34;,&amp;#34;root@10.</description>
    </item>
    
    <item>
      <title>wsl 커맨드로 현재 위치 열리게 하기</title>
      <link>https://cybertramp.net/posts/20220202_002/</link>
      <pubDate>Thu, 03 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>https://cybertramp.net/posts/20220202_002/</guid>
      <description>WSL에서 다음과 같이 설정해두면 된다.
alias open=&amp;#34;explorer.exe&amp;#34; </description>
    </item>
    
    <item>
      <title>Installation - GoLang</title>
      <link>https://cybertramp.net/posts/20220119_001/</link>
      <pubDate>Wed, 19 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://cybertramp.net/posts/20220119_001/</guid>
      <description>Version: 1.17.6을 설치하는 방법이다.
  다운 및 설치
# wget sudo -i mkdir go; cd go wget https://go.dev/dl/go1.17.6.linux-amd64.tar.gz rm -rf /usr/local/go &amp;amp;&amp;amp; tar -C /usr/local -xzf go1.17.6.linux-amd64.tar.gz exit go version   프로젝트 생성 &amp;amp; 셋업
cd {project dict} go mod init {package name} go mod tidy go build   Compile
GOOS=linux GOARCH=amd64 go build -v xxxx.go GOOS=windows GOARCH=amd64 go build -v xxxx.go   </description>
    </item>
    
    <item>
      <title>Build</title>
      <link>https://cybertramp.net/posts/20220320_003/</link>
      <pubDate>Mon, 03 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://cybertramp.net/posts/20220320_003/</guid>
      <description>Go언어의 장점은 현재있는 환경(OS)에서 다른 OS 간의 빌드가 쉽다는 것이다.
Cross Compile Go (Golang) GOOS and GOARCH (github.com)
Build는 다음과 같이 할 수 있다.
GOOS=linux GOARCH=amd64 go build -v xxxx.go GOOS=windows GOARCH=amd64 go build -v xxxx.go </description>
    </item>
    
    <item>
      <title>char to string</title>
      <link>https://cybertramp.net/posts/20220103_004/</link>
      <pubDate>Mon, 03 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://cybertramp.net/posts/20220103_004/</guid>
      <description>C/CPP에서 string 관련해서는 조심히 다룰 필요가 있다.
  char to string
char arr[20] = {0,}; string str_arr(str); printf(&amp;#34;%s\n&amp;#34;, str_arr.c_str());   String 선언하면서 함수로 사용할때 조심
char fw[9] = {0, }; memset(fw, 0x0, sizeof(fw)+1); memcpy(fw, reason_identifier+22, 8); fw[8] = &amp;#39;\0&amp;#39;; string tele_fw(fw);   </description>
    </item>
    
    <item>
      <title>GoLang에서 import된 다른 소스 코드의 변수 또는 함수 접근</title>
      <link>https://cybertramp.net/posts/20220320_005/</link>
      <pubDate>Mon, 03 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://cybertramp.net/posts/20220320_005/</guid>
      <description>Go언어로 작성시 2번 이나 삽질한 내용이다.
참고
Go언어에서 다른 소스코드의 변수/함수를 사용하려면(import 한 상태에서) 무조건 식별자가 대문자로 시작해야 접근이 가능하다.</description>
    </item>
    
    <item>
      <title>Map</title>
      <link>https://cybertramp.net/posts/20220103_005/</link>
      <pubDate>Mon, 03 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://cybertramp.net/posts/20220103_005/</guid>
      <description>리스트 형태의 struct 배열 생성 current_status := make([]MsgData, 0) current_status = append(current_status, MsgData{&amp;#34;1&amp;#34;,&amp;#34;2&amp;#34;,false}); </description>
    </item>
    
    <item>
      <title>nodejs - installation nvm, yarn</title>
      <link>https://cybertramp.net/posts/20220320_007/</link>
      <pubDate>Mon, 03 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://cybertramp.net/posts/20220320_007/</guid>
      <description>nodejs를 버전별로 손쉽게 전환할 수 있는 nvm과 패키지 관리자 yarn을 설치하는 방법이다.
nodejs를 활용하여 개발한다면 버전 호환성 문제가 발생할 수 있으므로 거의 필수이다.
참고: nvm-sh/nvm: Node Version Manager - POSIX-compliant bash script to manage multiple active node.js versions (github.com)
nvm 설치 wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.0/install.sh | bash 	# 환경파일에 설정 vi ~/.zshrc export NVM_DIR=&amp;#34;$([ -z &amp;#34;${XDG_CONFIG_HOME-}&amp;#34; ] &amp;amp;&amp;amp; printf %s &amp;#34;${HOME}/.nvm&amp;#34; || printf %s &amp;#34;${XDG_CONFIG_HOME}/nvm&amp;#34;)&amp;#34; [ -s &amp;#34;$NVM_DIR/nvm.sh&amp;#34; ] &amp;amp;&amp;amp; \.</description>
    </item>
    
    <item>
      <title>powerlevel10k 설치</title>
      <link>https://cybertramp.net/posts/20220320_006/</link>
      <pubDate>Mon, 03 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://cybertramp.net/posts/20220320_006/</guid>
      <description>다음을 설치하는 커맨드이다.
 zsh oh-my-zsh theme: powerlevel10k 설정  sudo apt install zsh -y sh -c &amp;#34;$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&amp;#34;  chsh -s /usr/bin/zsh  git clone https://github.com/romkatv/powerlevel10k.git ~/.oh-my-zsh/themes/powerlevel10k  vi ~/.zshrc ## Change Theme Name ZSH_THEME=&amp;#34;powerlevel10k/powerlevel10k&amp;#34;  # Terminal Restart  # Setup Your Config </description>
    </item>
    
    <item>
      <title>Powershell에서 Service control</title>
      <link>https://cybertramp.net/posts/20220320_004/</link>
      <pubDate>Mon, 03 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://cybertramp.net/posts/20220320_004/</guid>
      <description>Go언어로 Windows Service 프로그램을 만들면서 알게된 내용이다.
서비스 등록 sc.exe create &amp;#34;Go Windows Service&amp;#34; binPath= SERVICE_NAME\SERVICE_NAME.exe sc.exe config SERVICE_NAME start=auto sc.exe description &amp;#34;Go Windows Service&amp;#34; &amp;#34;Go Windows Service Description&amp;#34; sc.exe start &amp;#34;Go Windows Service&amp;#34; 서비스 제거 sc.exe delete SERVICE_NAME GoLang 관련  service로 사용시 fmt 라이브러리 사용하면 service 동작안함 windows 경로시 서비스로 돌기때문에 상대 경로로 넣으면 파일 못 불러옴  </description>
    </item>
    
    <item>
      <title>Vector</title>
      <link>https://cybertramp.net/posts/20220103_003/</link>
      <pubDate>Mon, 03 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://cybertramp.net/posts/20220103_003/</guid>
      <description>#include `를 포함한다.
  Vector 초기화
# 직접 할당 vector&amp;lt;int&amp;gt; vec = { -1,-1,-1 };  # 함수형 할당(3개의 원소, -1로 초기화) vector&amp;lt;int&amp;gt; vec(3,-1);  # fill 함수를 통한 초기화 vector&amp;lt;int&amp;gt; vec(3); fill(vec.begin(),vec.end(),-1);  # assign 함수를 통한 초기화 vector&amp;lt;int&amp;gt; vec; vec.assign(3,-1); for (int i = 0; i &amp;lt; 3; i++) {  cout &amp;lt;&amp;lt; vec[i] &amp;lt;&amp;lt; &amp;#34; &amp;#34;; }  # 다차원 벡터 초기화 vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; vec(3, vector&amp;lt;int&amp;gt;(3,-1));   Vector 특정 원소의 Index</description>
    </item>
    
    <item>
      <title>가변 길이 구조체 멤버</title>
      <link>https://cybertramp.net/posts/20220103_006/</link>
      <pubDate>Mon, 03 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://cybertramp.net/posts/20220103_006/</guid>
      <description>구조체 멤버에 가변 길이인 멤버 사용은 다음과 같으나, standard가 다르다.
// 표준struct account {int age;int gender;int name_length;char name[];}// 표준Xstruct account {int age;int gender;int name_length;char name[0]; } 위와 같이 사용하면, name 배열이 동적 배열이다. 다만 반드시 마지막에서만 사용이 가능하다.</description>
    </item>
    
    <item>
      <title>뮤텍스(Mutex)와 세마포어(Semaphore)</title>
      <link>https://cybertramp.net/posts/20220103_001/</link>
      <pubDate>Mon, 03 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://cybertramp.net/posts/20220103_001/</guid>
      <description>뮤텍스(Mutex) Mutual Exclusion(상호 배제)를 뜻하는 말로 Critical Section을 사지는 쓰레드들의 Running Time이 서로 겹치지 않도록 해주는 기법 1개의 쓰레드만이 공유 자원에 접근할 수 있도록 함.
Lock, Unlock 개념을 사용하므로, 이진 세마포어와 같은 개념
세마포어(Semaphore) 공유 자원에 여러 프로세스가 접근하는 것을 막는 것 현재 공유 자원의 상태를 나타내는 Counter 변수를 사용(커널에 값으로 존재)
뮤텍스와 세마포어의 차이 뮤텍스는 오직 1개의 프로세스 혹은 스레드만이 공유 자원 접근 가능, 프로세스 단 관리(타 프로세스 내부 변수 접근 불가) 세마포어는 지정된 변수의 값만큼 접근 가능, 커널 단 관리(타 프로세스 제어 가능)</description>
    </item>
    
    <item>
      <title>자주 사용하는 모음</title>
      <link>https://cybertramp.net/posts/20220320_002/</link>
      <pubDate>Mon, 03 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://cybertramp.net/posts/20220320_002/</guid>
      <description>시간 스트링 가져오기 import (  &amp;#34;fmt&amp;#34;  &amp;#34;time&amp;#34; )  currentTime := time.Now() fmt.Println(&amp;#34;Current Time in String: &amp;#34;, currentTime.String()) fmt.Println(&amp;#34;YYYY-MM-DD : &amp;#34;, currentTime.Format(&amp;#34;20060102_150405&amp;#34;)) Timer, Ticker Timer는 1회 성으로 사용하는 것, Ticker는 주기적으로 실행하는 경우 사용하는 것이다.
ticker := time.NewTicker(time.Second * 2)  for currentTime := range ticker.C { 	fmt.Println(&amp;#34;Tickered!&amp;#34;) } Windows에서의 File Permission 관련 대부분의 파일 함수 관련 Permission이 Linux용으로 존재.
Windows에서는 다음과 같이 Permission을 설정하여 사용 가능하다.</description>
    </item>
    
    <item>
      <title>포인터 변수를 인자로 넘겨 외부 함수 내에서 동적 할당하여 사용하기</title>
      <link>https://cybertramp.net/posts/20220103_002/</link>
      <pubDate>Mon, 03 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://cybertramp.net/posts/20220103_002/</guid>
      <description>A.cpp라는 클래스에서 포인터 변수를 선언 하고 B.cpp 내의 클래스 함수에서 인자로 넘겨 동적할당한 후 사용되게 하려면&amp;hellip;
 아래는 내부 버퍼를 가지고 카피하는 방식  //A.h u_int8_t *m_pBuf;  //A.cpp rc = g_func.GetLog_0x03(m_pBuf); display_getlog_03h(m_pBuf); delete[] m_pBuf;  //B.cpp u_int32_t CFuncUtil::GetLog_0x02(u_int8_t *&amp;amp;getlog_m_pBuf){ 	u_int8_t *pBuf = new u_int8_t[nBufferSize]; 	memset(pBuf, 0x0, nBufferSize); 		// copy to m_pBuf 	getlog_m_pBuf = new u_int8_t[nBufferSize]; 	memcpy(getlog_m_pBuf, pBuf, nBufferSize);  	// free pBuf 	delete[] pBuf; 	pBuf = NULL; 		return RETURN_SUCCESS;  }  아래는 외부 것 그대로 사용하는 방식  //A.</description>
    </item>
    
    <item>
      <title>해결하기 - too many open files; retrying in 1s</title>
      <link>https://cybertramp.net/posts/20211107_001/</link>
      <pubDate>Sun, 07 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://cybertramp.net/posts/20211107_001/</guid>
      <description>Go로 http 라이브러리를 사용하여 API 서버를 만들었으나, 테스트로 1일 동안 여러 장비에서 API를 주고 받았는데, 문제가 생겨있었다.
 2021/10/30 04:26:49 http: Accept error: accept tcp [::]:4547: accept4: too many open files; retrying in 1s 2021/10/30 04:26:50 http: Accept error: accept tcp [::]:4547: accept4: too many open files; retrying in 1s 2021/10/30 04:26:51 http: Accept error: accept tcp [::]:4547: accept4: too many open files; retrying in 1s 2021/10/30 04:26:52 http: Accept error: accept tcp [::]:4547: accept4: too many open files; retrying in 1s 2021/10/30 04:26:53 http: Accept error: accept tcp [::]:4547: accept4: too many open files; retrying in 1s 2021/10/30 04:26:54 http: Accept error: accept tcp [::]:4547: accept4: too many open files; retrying in 1s 2021/10/30 04:26:55 http: Accept error: accept tcp [::]:4547: accept4: too many open files; retrying in 1s 2021/10/30 04:26:56 http: Accept error: accept tcp [::]:4547: accept4: too many open files; retrying in 1s 파일을 너무 많이 열어서 문제가 생긴건데, 원인이 뭔지 몰랐다.</description>
    </item>
    
    <item>
      <title>Build - nvme-cli</title>
      <link>https://cybertramp.net/posts/20210822_001/</link>
      <pubDate>Sun, 22 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://cybertramp.net/posts/20210822_001/</guid>
      <description>1. 클론/컴파일/설치 git clone https://github.com/linux-nvme/nvme-cli.git cd nvme-cli make make install  # RUN nvme --version 2. 커스텀 플러그인 추가 플러그인은 todd라는 명으로 추가한다.
mkdir -p plugins/todd   plugins/todd/todd-nvme.h
#undef CMD_INC_FILE #define CMD_INC_FILE plugins/todd/todd-nvme  #if !defined(TODD_NVME) || defined(CMD_HEADER_MULTI_READ) #define TODD_NVME  #include &amp;#34;cmd.h&amp;#34;#include &amp;lt;stdio.h&amp;gt; PLUGIN(NAME(&amp;#34;todd&amp;#34;, &amp;#34;Todd plugin&amp;#34;),  COMMAND_LIST(  ENTRY(&amp;#34;list&amp;#34;,&amp;#34;List available FADU devices&amp;#34;,todd_list)  ) );  #endif  #include &amp;#34;define_cmd.h&amp;#34;  plugins/todd/todd-nvme.c
#include &amp;#34;nvme.h&amp;#34;  #define CREATE_CMD #include &amp;#34;todd-nvme.</description>
    </item>
    
    <item>
      <title>Installation - ElasticSearch</title>
      <link>https://cybertramp.net/posts/20210822_005/</link>
      <pubDate>Sun, 22 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://cybertramp.net/posts/20210822_005/</guid>
      <description>주의   service로 동작하므로 wsl에서 테스트 불가
  참고  https://www.digitalocean.com/community/tutorials/how-to-install-elasticsearch-logstash-and-kibana-elastic-stack-on-ubuntu-20-04    $ curl -fsSL https://artifacts.elastic.co/GPG-KEY-elasticsearch | sudo apt-key add - $ echo &amp;#34;deb https://artifacts.elastic.co/packages/7.x/apt stable main&amp;#34; | sudo tee -a /etc/apt/sources.list.d/elastic-7.x.list $ sudo apt update $ sudo apt install elasticsearch  $ sudo vi /etc/elasticsearch/elasticsearch.yml /etc/elasticsearch/elasticsearch.yml
# ---------------------------------- Network -----------------------------------## Set the bind address to a specific IP (IPv4 or IPv6):#network.host:localhost$ sudo systemctl start elasticsearch $ sudo systemctl enable elasticsearch   Request Test</description>
    </item>
    
    <item>
      <title>Installation - gitea(docker)</title>
      <link>https://cybertramp.net/posts/20210822_004/</link>
      <pubDate>Sun, 22 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://cybertramp.net/posts/20210822_004/</guid>
      <description>참고
 https://docs.docker.com/compose/install/ https://docs.gitea.io/en-us/install-with-docker/  apt install docker docker.io -y  sudo curl -L &amp;#34;[https://github.com/docker/compose/releases/download/1.26.0/docker-compose-$(uname -s)-$(uname -m)](https://github.com/docker/compose/releases/download/1.26.0/docker-compose-$(uname%20-s)-$(uname%20-m))&amp;#34; -o /usr/local/bin/docker-compose  sudo chmod +x /usr/local/bin/docker-compose mkdir dockers cd dockers vi docker-compose.yml docker-compose.yml
version:&amp;#34;2&amp;#34;networks:gitea:external:falseservices:server:image:gitea/gitea:latestenvironment:- USER\_UID=1000- USER\_GID=1000restart:alwaysnetworks:- giteavolumes:- ./gitea:/data- /etc/timezone:/etc/timezone:ro- /etc/localtime:/etc/localtime:roports:- &amp;#34;3000:3000&amp;#34;- &amp;#34;2222:22&amp;#34;docker-compose up docker-compose start </description>
    </item>
    
    <item>
      <title>Installation - Mongo DB</title>
      <link>https://cybertramp.net/posts/20210822_002/</link>
      <pubDate>Sun, 22 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://cybertramp.net/posts/20210822_002/</guid>
      <description>참고
1. 키 추가 wget -qO - https://www.mongodb.org/static/pgp/server-4.2.asc | sudo apt-key add - 2. 레포지토리 추가 echo &amp;#34;deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu bionic/mongodb-org/4.2 multiverse&amp;#34; | sudo tee /etc/apt/sources.list.d/mongodb-org-4.2.list 3. 패키지 최신화 및 설치 sudo apt update sudo apt-get install -y mongodb-org 4. 서비스 시작 service mongod start service mongod enable service mongod status 5. 관리자 계정 생성 MongoDB CLI를 통해 인증을 위한 관리자 계정을 생성한다.
mongo
use admin db.createUser(  {  user: &amp;#34;원하는 계정 이름&amp;#34;,  pwd: &amp;#34;패스워드&amp;#34;,  roles: [&amp;#39;root&amp;#39;]  } ) 6.</description>
    </item>
    
    <item>
      <title>WSL1 vs WSL2</title>
      <link>https://cybertramp.net/posts/20210822_003/</link>
      <pubDate>Sun, 22 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://cybertramp.net/posts/20210822_003/</guid>
      <description>WSL 차이 WSL은 hyper-v 사용하지 않았음 WSL2는 Hyper-v 기반이라 WSL2를 사용하면 virtualbox, vmware를 사용할 수 없었으나, 현재는 virtualbox, vmware가 hyper-v를 사용해도 동작되게 변경됨
WSL1은 리눅스 시스템 콜을 NT 커널에서 구현하는 방식 WSL2는 MS가 이짓 하다가 안되겠다 싶어서 리눅스 커널 통째로 하이퍼바이저에 올림</description>
    </item>
    
    <item>
      <title>CentOS8 Default Repo config</title>
      <link>https://cybertramp.net/posts/20210609_001/</link>
      <pubDate>Wed, 09 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://cybertramp.net/posts/20210609_001/</guid>
      <description>stream 버전 사용시 config가 필요할지도&amp;hellip;
# CentOS8 Default Repo config[BaseOS]name=CentOS-$releasever - Basemirrorlist=http://mirrorlist.centos.org/?release=$releasever&amp;amp;arch=$basearch&amp;amp;repo=BaseOS&amp;amp;infra=$infra#baseurl=http://mirror.centos.org/$contentdir/$releasever/BaseOS/$basearch/os/gpgcheck=1enabled=1gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-centosofficial </description>
    </item>
    
    <item>
      <title>Installation - Windows Terminal(use powershell)</title>
      <link>https://cybertramp.net/posts/20210609_002/</link>
      <pubDate>Wed, 09 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://cybertramp.net/posts/20210609_002/</guid>
      <description>Microsoft Store가 아닌 Powershell로 Windows Terminal을 설치하는 방법이다.
Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString(&amp;#39;https://chocolatey.org/install.ps1&amp;#39;))  choco install microsoft-windows-terminal </description>
    </item>
    
    <item>
      <title>신기한 게임 Vampire Survivors</title>
      <link>https://cybertramp.net/posts/20220220_001/</link>
      <pubDate>Fri, 19 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://cybertramp.net/posts/20220220_001/</guid>
      <description>최근에 Vampire Survivors 라는 게임이 Hot 하다고 들었다. 하지만 그냥 인디 게임이라 생각이 들어 지나치고 있었다. 그러다가 유튜브 알고리즘에 보여 내 눈에 들어오게 되었고 저렴한 금액에 구입을 하였고 게임을 해봤다.
게임에 대한 조그만한 이야기.. 게임은 로그라이크 형식의 게임인데, 바인딩 오브 아이작이라는 게임과 비슷하다. 적들이 사방에서 계속 Gen되며, 자동으로 나가는 공격으로 방향키만 조작하여 적들을 죽인다.
죽인 적에서는 경험치가 나오고 그 경험치를 먹고 레벨업을 하게되면 내가 원하는 무기트리와 버프 트리를 선택할 수 있다.</description>
    </item>
    
    <item>
      <title>zip file permission</title>
      <link>https://cybertramp.net/posts/20200903_001/</link>
      <pubDate>Thu, 03 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://cybertramp.net/posts/20200903_001/</guid>
      <description>원래 tar는 permission을 그대로 가지고 묶고 zip은 permission을 포함하지 않고 압축을 했음.
하지만 info-ZIP 3.0 부터 file/dirs UNIX permission과 UID/GID 소유권을 포함 할 수 있게 되었음. unix와 Windows NT에서는 보존하여 압축, 압축 해제 가능하나 Windows에서는 불가능함.
 unzip의 관련 내용
https://unix.stackexchange.com/questions/313656/preserving-permissions-while-zipping
Dates, times and permissions of stored directories are not restoredexcept under Unix. (On Windows NT and successors, timestamps are nowrestored.)    permission 포함 압축 및 해제 옵션은 없어도 기본 적용</description>
    </item>
    
    <item>
      <title>QT Framework</title>
      <link>https://cybertramp.net/posts/20200901_001/</link>
      <pubDate>Tue, 01 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://cybertramp.net/posts/20200901_001/</guid>
      <description>Qt Qt는 GUI 프로그램 개발에 널리 쓰이는 크로스 플랫폼 프레임워크. Qt는 한번쓰고 여러 플랫폼용으로 컴파일하는것을 메인으로 개발된 프레임워크이다.
  현재 버전
2020년 9월 기준 Qt 5.15와 Qt 4.11.1이 최신
  License
두가지 라이센스 방식이 존재
  Commercial License
외부에 코드를 공개하지 않고도 독점적인 SW 개발 가능
연간 구독요금이 $3950, UI 빌더 툴 별도(추가 연간 $999)
  GNU LGPL 버전 2.1
Qt 5.6(2016.03 Released) 까지까지 해당 라이센스였음</description>
    </item>
    
    <item>
      <title>Windows Terminal에서 시작 디렉토리 지정하기</title>
      <link>https://cybertramp.net/posts/20191121_001/</link>
      <pubDate>Sat, 23 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://cybertramp.net/posts/20191121_001/</guid>
      <description>Windows Terminal을 설치하고 실행하면 경로가 윈도우의 홈 디렉토리로 시작하게 된다. 작업하는데 매번 해당 경로를 타고 다시 이동해야하는 번거로움을 줄이기 위해 설정한다.
  기존 예제
기존에는 &amp;quot;startingDirectory&amp;quot; 속성이 없어서 터미널 실행시 아래와 같은 위치로 시작한다.
[설정된 속성]
{  &amp;#34;guid&amp;#34;: &amp;#34;{c6eaf9f4-32a7-5fdc-b5cf-066e8a4b1e40}&amp;#34;,  &amp;#34;hidden&amp;#34;: false,  &amp;#34;name&amp;#34;: &amp;#34;Ubuntu-18.04&amp;#34;,  &amp;#34;source&amp;#34;: &amp;#34;Windows.Terminal.Wsl&amp;#34; }, [터미널 시작시]
paran_son@pandorica:/mnt/c/Users/paran_son$   위치를 WSL 내 사용자 홈 디렉토리로 변경
 여기서 home 디렉토리 아래 사용자명은 WSL 내 사용자 명으로 설정해주어야 한다.</description>
    </item>
    
    <item>
      <title>Dlib 설치 &amp; 연동</title>
      <link>https://cybertramp.net/posts/20191028_001/</link>
      <pubDate>Mon, 28 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://cybertramp.net/posts/20191028_001/</guid>
      <description>[1] Dlib 설치 사전 상태  opencv4 버전, Visual Studio community 2019가 설치되어 있음
 1. dlib 다운 공식페이지에서 다운로드 받고 압축풀기
2. Cmake 다운 &amp;amp; 실행 공식페이지에서 Bianry로 다운로드
cmake-3.16.0-win64-x64\bin에서 cmake-gui.exe실행
 내가 다운로드 받은 것은 x64용이다.
   소스코드 경로 잡아주기
  바이너리 빌드 위치 잡아주기
  Configure 클릭
  VIsual Studio 버전과 x64선택
  먼저 에러가 빨갛게 에러가 나겠지만 OpenCV 경로 지정이 잘못되서 그럴것이다.</description>
    </item>
    
    <item>
      <title>PowerPC64 환경에서 CentOS7</title>
      <link>https://cybertramp.net/posts/20191027_001/</link>
      <pubDate>Sun, 27 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://cybertramp.net/posts/20191027_001/</guid>
      <description>Ubuntu 환경 위에서 qemu-system-ppc를 통해 CentOS 7을 실행한다.
 하루를 삽질했다&amp;hellip;ㅠ
 1. 설치 1) CentOS7 minimal 다운로드 ppc 아키텍쳐 버전의 CentOS7은 다음 사이트에서 다운 받는다.
http://isoredirect.centos.org/altarch/7/isos/ppc64/
원하는 미러 사이트에서 CentOS-7-ppc64-Minimal-1908.iso을 내려 받으면된다.
 나는 http://mirror.xtom.com.hk/centos-altarch/7.7.1908/isos/ppc64/ 이 미러에서 받았다. 가장 빨랐다.
 2) qemu 설치   qemu 설치
sudo apt install qemu-kvm qemu virt-manager virt-viewer libvirt-bin -y   ppc용 설치
sudo apt install qemu-system-ppc openbios-ppc -y   3) 브릿지 설정   설치</description>
    </item>
    
    <item>
      <title>CPP 기본 틀</title>
      <link>https://cybertramp.net/posts/20190101_001/</link>
      <pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://cybertramp.net/posts/20190101_001/</guid>
      <description>나는 여러 언어를 사용하면서 매번 헷갈리므로 기본 틀도 적어 둔다.
#include &amp;lt;iostream&amp;gt; using namespace std;  int main() { 	cout &amp;lt;&amp;lt; &amp;#34;Hello World!\n&amp;#34;;  } </description>
    </item>
    
  </channel>
</rss>
