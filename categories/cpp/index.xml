<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>cpp on Cybertramp Blog</title>
    <link>https://cybertramp.net/categories/cpp/</link>
    <description>Recent content in cpp on Cybertramp Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-kr</language>
    <lastBuildDate>Mon, 03 Jan 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://cybertramp.net/categories/cpp/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>char to string</title>
      <link>https://cybertramp.net/posts/20220103_004/</link>
      <pubDate>Mon, 03 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://cybertramp.net/posts/20220103_004/</guid>
      <description>C/CPP에서 string 관련해서는 조심히 다룰 필요가 있다.
  char to string
char arr[20] = {0,}; string str_arr(str); printf(&amp;#34;%s\n&amp;#34;, str_arr.c_str());   String 선언하면서 함수로 사용할때 조심
char fw[9] = {0, }; memset(fw, 0x0, sizeof(fw)+1); memcpy(fw, reason_identifier+22, 8); fw[8] = &amp;#39;\0&amp;#39;; string tele_fw(fw);   </description>
    </item>
    
    <item>
      <title>Vector</title>
      <link>https://cybertramp.net/posts/20220103_003/</link>
      <pubDate>Mon, 03 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://cybertramp.net/posts/20220103_003/</guid>
      <description>#include `를 포함한다.
  Vector 초기화
# 직접 할당 vector&amp;lt;int&amp;gt; vec = { -1,-1,-1 };  # 함수형 할당(3개의 원소, -1로 초기화) vector&amp;lt;int&amp;gt; vec(3,-1);  # fill 함수를 통한 초기화 vector&amp;lt;int&amp;gt; vec(3); fill(vec.begin(),vec.end(),-1);  # assign 함수를 통한 초기화 vector&amp;lt;int&amp;gt; vec; vec.assign(3,-1); for (int i = 0; i &amp;lt; 3; i++) {  cout &amp;lt;&amp;lt; vec[i] &amp;lt;&amp;lt; &amp;#34; &amp;#34;; }  # 다차원 벡터 초기화 vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; vec(3, vector&amp;lt;int&amp;gt;(3,-1));   Vector 특정 원소의 Index</description>
    </item>
    
    <item>
      <title>가변 길이 구조체 멤버</title>
      <link>https://cybertramp.net/posts/20220103_006/</link>
      <pubDate>Mon, 03 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://cybertramp.net/posts/20220103_006/</guid>
      <description>구조체 멤버에 가변 길이인 멤버 사용은 다음과 같으나, standard가 다르다.
// 표준struct account {int age;int gender;int name_length;char name[];}// 표준Xstruct account {int age;int gender;int name_length;char name[0]; } 위와 같이 사용하면, name 배열이 동적 배열이다. 다만 반드시 마지막에서만 사용이 가능하다.</description>
    </item>
    
    <item>
      <title>포인터 변수를 인자로 넘겨 외부 함수 내에서 동적 할당하여 사용하기</title>
      <link>https://cybertramp.net/posts/20220103_002/</link>
      <pubDate>Mon, 03 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://cybertramp.net/posts/20220103_002/</guid>
      <description>A.cpp라는 클래스에서 포인터 변수를 선언 하고 B.cpp 내의 클래스 함수에서 인자로 넘겨 동적할당한 후 사용되게 하려면&amp;hellip;
 아래는 내부 버퍼를 가지고 카피하는 방식  //A.h u_int8_t *m_pBuf;  //A.cpp rc = g_func.GetLog_0x03(m_pBuf); display_getlog_03h(m_pBuf); delete[] m_pBuf;  //B.cpp u_int32_t CFuncUtil::GetLog_0x02(u_int8_t *&amp;amp;getlog_m_pBuf){ 	u_int8_t *pBuf = new u_int8_t[nBufferSize]; 	memset(pBuf, 0x0, nBufferSize); 		// copy to m_pBuf 	getlog_m_pBuf = new u_int8_t[nBufferSize]; 	memcpy(getlog_m_pBuf, pBuf, nBufferSize);  	// free pBuf 	delete[] pBuf; 	pBuf = NULL; 		return RETURN_SUCCESS;  }  아래는 외부 것 그대로 사용하는 방식  //A.</description>
    </item>
    
    <item>
      <title>QT Framework</title>
      <link>https://cybertramp.net/posts/20200901_001/</link>
      <pubDate>Tue, 01 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://cybertramp.net/posts/20200901_001/</guid>
      <description>Qt Qt는 GUI 프로그램 개발에 널리 쓰이는 크로스 플랫폼 프레임워크. Qt는 한번쓰고 여러 플랫폼용으로 컴파일하는것을 메인으로 개발된 프레임워크이다.
  현재 버전
2020년 9월 기준 Qt 5.15와 Qt 4.11.1이 최신
  License
두가지 라이센스 방식이 존재
  Commercial License
외부에 코드를 공개하지 않고도 독점적인 SW 개발 가능
연간 구독요금이 $3950, UI 빌더 툴 별도(추가 연간 $999)
  GNU LGPL 버전 2.1
Qt 5.6(2016.03 Released) 까지까지 해당 라이센스였음</description>
    </item>
    
    <item>
      <title>Dlib 설치 &amp; 연동</title>
      <link>https://cybertramp.net/posts/20191028_001/</link>
      <pubDate>Mon, 28 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://cybertramp.net/posts/20191028_001/</guid>
      <description>[1] Dlib 설치 사전 상태  opencv4 버전, Visual Studio community 2019가 설치되어 있음
 1. dlib 다운 공식페이지에서 다운로드 받고 압축풀기
2. Cmake 다운 &amp;amp; 실행 공식페이지에서 Bianry로 다운로드
cmake-3.16.0-win64-x64\bin에서 cmake-gui.exe실행
 내가 다운로드 받은 것은 x64용이다.
   소스코드 경로 잡아주기
  바이너리 빌드 위치 잡아주기
  Configure 클릭
  VIsual Studio 버전과 x64선택
  먼저 에러가 빨갛게 에러가 나겠지만 OpenCV 경로 지정이 잘못되서 그럴것이다.</description>
    </item>
    
    <item>
      <title>CPP 기본 틀</title>
      <link>https://cybertramp.net/posts/20190101_001/</link>
      <pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://cybertramp.net/posts/20190101_001/</guid>
      <description>나는 여러 언어를 사용하면서 매번 헷갈리므로 기본 틀도 적어 둔다.
#include &amp;lt;iostream&amp;gt; using namespace std;  int main() { 	cout &amp;lt;&amp;lt; &amp;#34;Hello World!\n&amp;#34;;  } </description>
    </item>
    
  </channel>
</rss>
