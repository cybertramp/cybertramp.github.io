{"categories":[{"title":"daily","uri":"https://cybertramp.net/categories/daily/"},{"title":"DB","uri":"https://cybertramp.net/categories/db/"},{"title":"opencv","uri":"https://cybertramp.net/categories/opencv/"},{"title":"ppc64","uri":"https://cybertramp.net/categories/ppc64/"},{"title":"ssd","uri":"https://cybertramp.net/categories/ssd/"},{"title":"tip","uri":"https://cybertramp.net/categories/tip/"},{"title":"webserver","uri":"https://cybertramp.net/categories/webserver/"}],"posts":[{"content":"1. 클론/컴파일/설치 git clone https://github.com/linux-nvme/nvme-cli.git cd nvme-cli make make install # RUN nvme --version  2. 커스텀 플러그인 추가 플러그인은 todd라는 명으로 추가한다.\nmkdir -p plugins/todd    plugins/todd/todd-nvme.h\n#undef CMD_INC_FILE #define CMD_INC_FILE plugins/todd/todd-nvme #if !defined(TODD_NVME) || defined(CMD_HEADER_MULTI_READ) #define TODD_NVME #include \u0026quot;cmd.h\u0026quot; #include \u0026lt;stdio.h\u0026gt; PLUGIN(NAME(\u0026quot;todd\u0026quot;, \u0026quot;Todd plugin\u0026quot;), COMMAND_LIST( ENTRY(\u0026quot;list\u0026quot;,\u0026quot;List available FADU devices\u0026quot;,todd_list) ) ); #endif #include \u0026quot;define_cmd.h\u0026quot;    plugins/todd/todd-nvme.c\n#include \u0026quot;nvme.h\u0026quot; #define CREATE_CMD #include \u0026quot;todd-nvme.h\u0026quot; static int todd_list(int argc, char **argv, struct command *cmd, struct plugin *plugin){ printf(\u0026quot;Hello world!\u0026quot;); return 0; }    Makefile\n# 변경전 PLUGIN_OBJS := \\ plugins/intel/intel-nvme.o \\ plugins/lnvm/lnvm-nvme.o \\ plugins/memblaze/memblaze-nvme.o \\ plugins/wdc/wdc-nvme.o \\ plugins/wdc/wdc-utils.o \\ plugins/huawei/huawei-nvme.o \\ plugins/netapp/netapp-nvme.o \\ plugins/toshiba/toshiba-nvme.o \\ plugins/micron/micron-nvme.o \\ plugins/seagate/seagate-nvme.o \\ plugins/virtium/virtium-nvme.o \\ plugins/shannon/shannon-nvme.o \\ plugins/dera/dera-nvme.o # 변경후 PLUGIN_OBJS := \\ plugins/intel/intel-nvme.o \\ plugins/lnvm/lnvm-nvme.o \\ plugins/memblaze/memblaze-nvme.o \\ plugins/wdc/wdc-nvme.o \\ plugins/wdc/wdc-utils.o \\ plugins/huawei/huawei-nvme.o \\ plugins/netapp/netapp-nvme.o \\ plugins/toshiba/toshiba-nvme.o \\ plugins/micron/micron-nvme.o \\ plugins/seagate/seagate-nvme.o \\ plugins/virtium/virtium-nvme.o \\ plugins/shannon/shannon-nvme.o \\ plugins/dera/dera-nvme.o \\ plugins/todd/todd-nvme.o    컴파일/설치/실행\npwd /root/nvme-cli # run on root permission state! make clean make make install # run /usr/sbin/nvme nvme todd list    ","id":0,"section":"posts","summary":"1. 클론/컴파일/설치 git clone https://github.com/linux-nvme/nvme-cli.git cd nvme-cli make make install # RUN nvme --version 2. 커스텀 플러그인 추가 플러그인은 todd라는 명으로 추가한다. mkdir -p plugins/todd plugins/todd/todd-nvme.h #undef CMD_INC_FILE #define CMD_INC_FILE plugins/todd/todd-nvme #if !defined(TODD_NVME) || defined(CMD_HEADER_MULTI_READ) #define TODD_NVME #include \u0026quot;cmd.h\u0026quot; #include \u0026lt;stdio.h\u0026gt;","tags":null,"title":"NVMe-cli 설치 및 플러그인 추가","uri":"https://cybertramp.net/2020/06/0004/","year":"2020"},{"content":"Django 1. Installation (1) venv 설치 개발 환경을 깔끔하게 관리하기 위한 도구\nmkdir v1 cd v1 sudo apt install python3-venv -y python3 -m venv v1 # 개발환경 적용 source v1/bin/activate  (2) Django 설치 python3 -m pip install --upgrade pip pip install django~=2.0.0 mkdir project1 django-admin startproject mysite .  다음과 같은 구조로 파일이 생성됨\n  생성된 구조\n. ├── manage.py └── mysite ├── __init__.py ├── __pycache__ │ ├── __init__.cpython-36.pyc │ └── settings.cpython-36.pyc ├── settings.py ├── urls.py └── wsgi.py 2 directories, 7 files    (3) 설정 변경   타임존/정적파일 위치 변경\n기존 것을 변경하되 없으면 추가\nmysite/settings.py\nTIME_ZONE = 'Asia/Seoul' STATIC_URL = '/static/' STATIC_ROOT = os.path.join(BASE_DIR, 'static')    (4) DB 설정 Django는 기본적으로 sqlite3가 적용되어 있음\nmysite/settings.py\nDATABASES = { 'default': { 'ENGINE': 'django.db.backends.sqlite3', 'NAME': os.path.join(BASE_DIR, 'db.sqlite3'), } }  SITE에 DB를 생성하기 위해서는 커맨드를 실행해야함\n./manage.py migrate  (5) 서버 실행 ./manage.py runserver  2. App 만들기 (1) 생성 ./manage.py startapp blog  ","id":1,"section":"posts","summary":"Django 1. Installation (1) venv 설치 개발 환경을 깔끔하게 관리하기 위한 도구 mkdir v1 cd v1 sudo apt install python3-venv -y python3 -m venv v1 # 개발환경 적용 source v1/bin/activate (2) Django 설치 python3 -m pip install --upgrade pip pip install django~=2.0.0 mkdir project1 django-admin startproject mysite . 다음과 같은","tags":null,"title":"Django 설치","uri":"https://cybertramp.net/2020/06/0001/","year":"2020"},{"content":"참고\n1. 키 추가 wget -qO - https://www.mongodb.org/static/pgp/server-4.2.asc | sudo apt-key add -  2. 레포지토리 추가 echo \u0026quot;deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu bionic/mongodb-org/4.2 multiverse\u0026quot; | sudo tee /etc/apt/sources.list.d/mongodb-org-4.2.list  3. 패키지 최신화 및 설치 sudo apt update sudo apt-get install -y mongodb-org  4. 서비스 시작 service mongod start service mongod enable service mongod status  5. 관리자 계정 생성 MongoDB CLI를 통해 인증을 위한 관리자 계정을 생성한다.\nmongo\nuse admin db.createUser( { user: \u0026quot;원하는 계정 이름\u0026quot;, pwd: \u0026quot;패스워드\u0026quot;, roles: ['root'] } )  6. MongoDB 바인딩 설정 및 관리자 계정 설정 기본적으로 처음에 127.0.0.1로 바인딩 되게 설정되어 있으므로 수정해주어야 외부에서 접근이 가능하다. 또한 MongoDB는 기존 Mysql or MariaDB와 달리 설치시 계정을 설정하지 않는다. 따라서 보안을 위해 따로 설정을 해주어야한다.\n/etc/mongod.conf\n# network interfaces net: port: 27017 bindIp: 0.0.0.0 # Authentication security: authorization: enabled  7. 접속 확인 세가지 방법이 가능하다. 커맨드를 통해 or 쉘에 들어가있는 상태 or ORM을 통한 접속 확인\n  커맨드\nmongo -u \u0026quot;admin\u0026quot; -p --authenticationDatabase \u0026quot;admin\u0026quot;    쉘\nuse admin db.auth(\u0026quot;계정\u0026quot;, \u0026quot;암호\u0026quot; )    Mongoose\nmongoose.connect('mongodb://계정:암호@호스트:포트/admin', { dbName: '사용할 데이터베이스' });     몽고 DB는 실제로도 DB에 계정을 설정안해 암호화 당하고 비트코인 요구를 당한 적이 있으니 필이 계정을 설정하여 접근하는 것이좋다.\n ","id":2,"section":"posts","summary":"참고 1. 키 추가 wget -qO - https://www.mongodb.org/static/pgp/server-4.2.asc | sudo apt-key add - 2. 레포지토리 추가 echo \u0026quot;deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu bionic/mongodb-org/4.2 multiverse\u0026quot; | sudo tee /etc/apt/sources.list.d/mongodb-org-4.2.list 3. 패키지 최신화 및 설치 sudo apt update sudo apt-get install -y mongodb-org 4. 서비스 시작 service mongod start service mongod enable service mongod status 5. 관","tags":null,"title":"MongoDB 설치 및 사용","uri":"https://cybertramp.net/2020/06/0002/","year":"2020"},{"content":"이 문제가 왜 발생했는지는 모르겠다. 그냥 갑자기 발생했다. visual studio code에서 특정 폴더를 열고 파일의 행을 복사해서 사용하던 도중 발생한 문제였다.\n윈도우에서 편집시 개행문자가 붙어서 저장되는데 이를 Unix기반에서 읽는 경우 발생하는 문제라고한다.\n분명 또 다시 찾을 내 자신을 걱정하며 기록해둔다.\n1번 방법: vi 이건 vi 에서 해당 문자를 제거하는 방법을 설명이다.\n일단 이 망할 문자는 CTRL + v와 m 키를 누르면 생성된다.\nvi -b 파일명\n-b 옵션은 바이너리 모드로 여는 옵션이다. 이렇게 해야 이상한 개행문자가 잘보인다.\n:%s/^M$//g  여기서 중요한건 ^M 부분은 CTRL+v CTRL+m을 눌러야 생기는 문자라는 것이다.\n저렇게 바꾸고 저장하면된다.\nsed 커맨드로도 가능하지만 생략한다.\n","id":3,"section":"posts","summary":"이 문제가 왜 발생했는지는 모르겠다. 그냥 갑자기 발생했다. visual studio code에서 특정 폴더를 열고 파일의 행을 복사해서 사용하던 도중 발생한 문제였다. 윈도우에서 편","tags":null,"title":"특수 문자 ^M 처리하기","uri":"https://cybertramp.net/2020/06/0005/","year":"2020"},{"content":"1년이나 지나서야 다시 블로그를 시작하려고한다.\n너무 많은 일들과 시간이 지나가 버렸지만.. 제대로 다시 한번 정보도 기록하고 공유하면서 사용하려고한다.\n아마 큰 이유는 맥북이 생겼기 때문인것 같다.\n맥북 이야기 직장을 다닌지 어느덧 5개월이 다되어가는데 내 자신에게는 아무런 선물을 하지 않고 있었다.\n그러던 중 내 자신이 굉장히 불편하게 한성 노트북을 사용하고 있다는 것을 깨닫게 되었다. 물론 이 생각을 가지고 있을때는 그냥 별 감흥이 없었다. 그러다가 맥북에어가 새로 나왔다는 소식, 가성비가 좋다는 소식을 들으면서 뽐뿌가 오기 시작했다. 하지만 가격은 120만원 이상이였고\u0026hellip; 내 현재로서는 감당이 안되었기 때문에 \u0026hellip;. 포기하고 있었다.\n언제나 갈팡질팡 하던 나는 2주간 고민을 하다가 지금 아니면 못지르겠구나! 하고 질러버렸고 매우 만족스러워 하고 있다. 하하하\u0026hellip;.\ni5도 고민을 했지만 난 가성비 노트북, 터미널이 이쁜걸 원하고 있었기에 i3 맥북에어 2020을 112만원을 주고 지르게되었다!\n회사 생활 회사를 다닌지가 벌써 5개월이 넘었다\u0026hellip; 기말고사가 끝나기도 무섭게 짐을 싸서 올라왔기에 정신도 없었고 심적으로 매우 힘들었던 4학년을 벗어나서 새로운 무언가를 한다는 기분은 너무 행복했다.\n재밌는건 많은걸 접해봤지만.. 생소한 반도체 회사에 들어오게 될줄은 정말 상상도 못했다. 무튼 아직 인간 관계도 매우 만족스럽고 일 적으로는 많이 부족하지만 즐겁게 다니고 있다. 아마 \u0026ldquo;당신이 지금 행복하지 않는 이유가 회사인가?\u0026rdquo; 라고 묻는다면 나는 \u0026ldquo;단지 출퇴근 때문에 매우 힘들어..\u0026ldquo;라고 할것이다.\n게임 작년에 내 생활은 다이아로 올라갈수 있게 최적화 되어 있었다. 하지만 올해는 아직 골드에서 놀고 있다\u0026hellip; 그만큼 게임에 되도록 적은 시간을 할당하려 노력하고 있다. 물론 그래도 롤은 하고 있고 CD게임 은 간간히 하고 있다. 시간이 조금 있다면.. 위쳐3라는 게임을 완주해보고 싶은 생각이 있다.\n공부 나는 어떻게든 살아남기 위해 무언가를 하려고 계속 시도하고 있다. 요즘은 회사분 한분과 웹개발 관련 스터디를 하고 있는데 매우 재미있게 하고 있다. mongoDB도 만져보고 REST, GraphQL도 만져보고 주위에 누군가와 컴퓨터와 관련된 대화를 하고 배우며 나눌수 있다는건 정말 좋은 일인 것같다. 추가적으로 나 혼자도 공부를 해야할것 같아 집에서 컴퓨터 구조와 운영체제를 하루 30분씩이라도 공부하려고 시도하고있다. 물론 잘 안된다\u0026hellip; 회사에서 나와 지하철을 타는 동안 집가서 뭘할지 계획을 쫙 세우고 도착하자 마자 머리를 초기화 시킨다.. 나의 쓸때없는 퇴근 텐션 덕분이다 ㅎ\n최근 하고 싶은것 최근에는 우울함이 높아서 하고 싶은게 없다. 하지만 만약 무언가를 할 수 있게 시간과 경제적 지원이 이루어진다면 디제잉을 배우거나 게임 앱을 만들어 보고 싶다. 깊게 들어가는건 내 흥미를 잃게 하기 때문에 초보 Level에서만 배우고 싶다. 시간과 기회가 된다면.. 난 게임도 해야하고 공부도 해야하고 출퇴근도 해야하고 친구도 만나야하고 .. 할게 너무 많다 ㅇ.ㅇ\n기여 활동 난 프로그래밍 능력이 엄청나지는 않아서 기여를 많이는 못하지만 기여를 간간히 하는 편이다.\n이전에 기여 했던 것을 보면 Xfce, Joplin, Manjaro Linux와 같은 곧에 기여를 좀 했었다. 물론 별로 큰건 아니지만 말이다. 무튼 계속적으로 기여를 하려고 하는데 이번에는 CherryTree라는 리눅스 오픈소스 프로그램 프로젝트에 한글화를 기여할 생각이다. 아직 1/3 밖에 번역을 못해서 언능해서 올리고 싶은 마음만 굴뚝 같다.\n마무리.. 블로그는 정말 자주 써야한다. 포스팅을 함으로써 내 자신으로도 다시 한 번 지식을 되새기고 아이디어를 떠오르게하고 생산성있는 일을 하게 만들어 주기 때문이다.\n열심히 써서 이전 다음블로그, 티스토리 할때 처럼 많은 양의 정보를 축적하고 공유하고 싶다. 물론 그러기 위해 필요한건 내 의지 뿐이다. 끝!\n","id":4,"section":"posts","summary":"1년이나 지나서야 다시 블로그를 시작하려고한다. 너무 많은 일들과 시간이 지나가 버렸지만.. 제대로 다시 한번 정보도 기록하고 공유하면서 사용하려고한다. 아마","tags":null,"title":"다시 시작하는 블로그","uri":"https://cybertramp.net/2020/05/0003/","year":"2020"},{"content":"Windows Terminal을 설치하고 실행하면 경로가 윈도우의 홈 디렉토리로 시작하게 된다. 작업하는데 매번 해당 경로를 타고 다시 이동해야하는 번거로움을 줄이기 위해 설정한다.\n  기존 예제\n기존에는 \u0026quot;startingDirectory\u0026quot; 속성이 없어서 터미널 실행시 아래와 같은 위치로 시작한다.\n[설정된 속성]\n{ \u0026quot;guid\u0026quot;: \u0026quot;{c6eaf9f4-32a7-5fdc-b5cf-066e8a4b1e40}\u0026quot;, \u0026quot;hidden\u0026quot;: false, \u0026quot;name\u0026quot;: \u0026quot;Ubuntu-18.04\u0026quot;, \u0026quot;source\u0026quot;: \u0026quot;Windows.Terminal.Wsl\u0026quot; },  [터미널 시작시]\nparan_son@pandorica:/mnt/c/Users/paran_son$    위치를 WSL 내 사용자 홈 디렉토리로 변경\n 여기서 home 디렉토리 아래 사용자명은 WSL 내 사용자 명으로 설정해주어야 한다.\n \u0026lt;수정된 속성\u0026gt;\n{ \u0026quot;guid\u0026quot;: \u0026quot;{c6eaf9f4-32a7-5fdc-b5cf-066e8a4b1e40}\u0026quot;, \u0026quot;hidden\u0026quot;: false, \u0026quot;name\u0026quot;: \u0026quot;Ubuntu-18.04\u0026quot;, \u0026quot;source\u0026quot;: \u0026quot;Windows.Terminal.Wsl\u0026quot;, \u0026quot;startingDirectory\u0026quot;: \u0026quot;\\\\\\\\wsl$\\\\Ubuntu-18.04\\\\home\\\\paran_son\u0026quot; },  \u0026lt;터미널 시작시\u0026gt;\ngreendot@pandorica:~$    위치를 c 드라이브 내 특정 디렉토리로 변경\n여기서는 c드라이브 내 working 디렉토리를 시작 위치로 지정한다.\n\u0026lt;수정된 속성\u0026gt;\n{ \u0026quot;guid\u0026quot;: \u0026quot;{c6eaf9f4-32a7-5fdc-b5cf-066e8a4b1e40}\u0026quot;, \u0026quot;hidden\u0026quot;: false, \u0026quot;name\u0026quot;: \u0026quot;Ubuntu-18.04\u0026quot;, \u0026quot;source\u0026quot;: \u0026quot;Windows.Terminal.Wsl\u0026quot;, \u0026quot;startingDirectory\u0026quot;: \u0026quot;../../working\u0026quot; },  \u0026lt;터미널 시작시\u0026gt;\ngreendot@pandorica:/mnt/c/working$    ","id":5,"section":"posts","summary":"Windows Terminal을 설치하고 실행하면 경로가 윈도우의 홈 디렉토리로 시작하게 된다. 작업하는데 매번 해당 경로를 타고 다시 이동해야하는 번거로움을 줄이기 위해","tags":null,"title":"Windows Terminal에서 시작 디렉토리 지정하기","uri":"https://cybertramp.net/2019/11/0006/","year":"2019"},{"content":"Dlib 설치 \u0026amp; 연동 [1] Dlib 설치 사전 상태  opencv4 버전, Visual Studio community 2019가 설치되어 있음\n 1. dlib 다운 공식페이지에서 다운로드 받고 압축풀기\n2. Cmake 다운 \u0026amp; 실행 공식페이지에서 Bianry로 다운로드\ncmake-3.16.0-win64-x64\\bin에서 cmake-gui.exe실행\n 내가 다운로드 받은 것은 x64용이다.\n   소스코드 경로 잡아주기\n  바이너리 빌드 위치 잡아주기\n  Configure 클릭\n  VIsual Studio 버전과 x64선택\n  먼저 에러가 빨갛게 에러가 나겠지만 OpenCV 경로 지정이 잘못되서 그럴것이다.\n OpenCD_DIR 경로 설정을 해주면 된다. opencv 경로는 C:/opencv/build\n  아래의 옵션 체크\n- DLIB_JPEG_SUPPORT\n- DLIB_PNG_SUPPORT\n- USE_AVX_INSTRUCTIONS\n- USE_SSE2_INSTRUCTIONS\n- USE_SSE4_INSTRUCTIONS\n  Configure 클릭\n  Generating done 뜨면 끝\n  3. 빌드 dlib-19.18\\dlib\\dlib_build\\dlib.sln 실행\n  빌드 -\u0026gt; 구성 관리자\n  빌드 모든 체크\n  닫고 빌드-솔루션 빌드\n 시간이 좀 걸려요 ㅠ\n   [2] Dlib 연동 사전 상태  먼저 빈 프로젝트가 생성되어 있으며, opencv4는 이미 연동 해놓은 상태이다.\n   프로젝트 - \u0026lt;프로젝트명\u0026gt; 속성\n  구성 속성 - VC++ 디렉터리 - 라이브러리 디렉터리 - 편집\n  C:\\dlib-19.18\\dlib\\dlib_build\\Debug 경로 추가\n 빌드 되었던 라이브러리 파일을 참조하기 위함\n   링커 - 입력 - 추가 종속성에서 dlib.lib 입력\n 나는 dlib.lib 파일명이 좀 이상하게 생성되었다.\ndlib-19.18\\dlib\\dlib_build\\Debug 에 있는 lib 명을 입력할 것\n   ","id":6,"section":"posts","summary":"Dlib 설치 \u0026amp; 연동 [1] Dlib 설치 사전 상태 opencv4 버전, Visual Studio community 2019가 설치되어 있음 1. dlib 다운 공식페이지에서 다운로드 받고 압축풀기 2. Cmake 다운 \u0026amp; 실행 공식페이지에서 Bia","tags":null,"title":"Dlib 설치","uri":"https://cybertramp.net/2019/10/dlib/","year":"2019"},{"content":"Ubuntu 환경 위에서 qemu-system-ppc를 통해 CentOS 7을 실행한다.\n 하루를 삽질했다\u0026hellip;ㅠ\n 1. 설치 1) CentOS7 minimal 다운로드 ppc 아키텍쳐 버전의 CentOS7은 다음 사이트에서 다운 받는다.\nhttp://isoredirect.centos.org/altarch/7/isos/ppc64/\n원하는 미러 사이트에서 CentOS-7-ppc64-Minimal-1908.iso을 내려 받으면된다.\n 나는 http://mirror.xtom.com.hk/centos-altarch/7.7.1908/isos/ppc64/ 이 미러에서 받았다. 가장 빨랐다.\n 2) qemu 설치   qemu 설치\nsudo apt install qemu-kvm qemu virt-manager virt-viewer libvirt-bin -y    ppc용 설치\nsudo apt install qemu-system-ppc openbios-ppc -y    3) 브릿지 설정   설치\nsudo apt install bridge-utils uml-utilities -y    브릿지 설정\n브릿지 할 인터페이스는 enp3s0를 기준으로 함\n# 브릿지 br0 인터페이스 생성 sudo brctl addbr br0 # enp3s0의 IP 클리어 sudo ip addr flush dev enp3s0 # br0를 enp3s0와 브릿지 sudo brctl addif br0 enp3s0 # tap 인터페이스 생성 sudo tunctl -t tap0 -u `whoami` # br0를 tap0와 브릿지 sudo brctl addif br0 tap0    인터페이스 활성화\nifconfig enp3s0 up ifconfig tap0 up ifconfig br0 up    브릿지 확인 및 br0에 ip 할당\nbrctl show \u0026amp;\u0026amp; sudo dhclient -v br0    4) 가상 디스크 생성 가상 디스크를 생성한다. qcow2 방식의 20G로 생성한다.\nqemu-img create -f qcow2 powerpc32.img 20G  5) VNC 클라이언트 설치 윈도우의 경우 TigerVNC를 사용하고 우분투인 경우 아래와 같이 설치한다.\nRemmina는 기본적으로 ssh, vnc, rdp를 지원하는 원격 접속 클라이언트이다.\nsudo apt install remmina -y  6) 에뮬레이터 실행 여러 가지 옵션으로 진행했기에 입맛에 맞춰 진행해야한다.\n[진행]   가상 디스크에 OS 설치 전\nsudo qemu-system-ppc64 \\ -m 1024 \\ -boot d \\ -hda powerpc32.img \\ -netdev tap,id=mynet0,ifname=tap0,script=no,downscript=no -device -cdrom CentOS-7-ppc64-Minimal-1908.iso \\ -vnc 0.0.0.0:5 \\ -usbdevice tablet    가상 디스크에 OS 설치 후\nOS 설치가 완료됬기 때문에 CD를 빼는 것 처럼 두 개의 옵션을 제거 한다. -boot, -cdrom\nsudo qemu-system-ppc64 \\ -m 1024 \\ -hda powerpc32.img \\ -netdev tap,id=mynet0,ifname=tap0,script=no,downscript=no -device e1000,netdev=mynet0,mac=52:54:00:fa:ce:11 \\ -vnc 0.0.0.0:5 \\ -usbdevice tablet    [옵션] 옵션이 너무나도 많기에 옵션을 정리해둔다.\n-m 1024: 메모리 1024MB 할당, 최대 2047MB\n-hda powerpc32.img: 특정 가상 디스크 파일을 가상 드라이브로 설정\n-boot d: CD-ROM을 우선 부팅(c 인 경우 첫번째 가상 드라이브 우선 부팅)\n-netdev tap,id=mynet0,ifname=tap0,script=no,downscript=no -device : 가상 네트워크 케이블(TAP)를 통해 QEMU 게스트 OS와 연결, 호스트에서는 브릿지된 tap0가 먼저 설정되어야 함\n-vnc 0.0.0.0:5: 게스트 OS의 화면을 VNC로 중계, 0.0.0.0:5은 모든 네트워크로 포트 5번을 의미. 만약 127.0.0.1이라면 QEMU를 실행중인 호스트OS만 접근이 가능\n-usbdevice tablet: 이중 커서 문제를 해결하기 위함, 이 옵션을 지정하지 않으면 VNC 연결시 호스트 OS 커서와 게스트 OS 커서 두 개가 생김\n 참고\nqemu 설치: https://www.unixmen.com/how-to-install-and-configure-qemu-in-ubuntu/\n네트워크 관련: https://gist.github.com/nstarke/c6593da117c459c18c255395211fa311\n네트워크 관련: https://www.linux-kvm.org/page/Networking\nppc 구동 관련: https://gmplib.org/~tege/qemu.html\nvirt-manager 관련: https://moriskim.wordpress.com/2014/02/24/virtio_with_kvm/\n커널, initrd 관련: https://gist.github.com/nstarke/c6593da117c459c18c255395211fa311\nqemu 옵션들: https://wiki.gentoo.org/wiki/QEMU/Options#Boot_order\n ","id":7,"section":"posts","summary":"Ubuntu 환경 위에서 qemu-system-ppc를 통해 CentOS 7을 실행한다. 하루를 삽질했다\u0026hellip;ㅠ 1. 설치 1) CentOS7 minimal 다운로드 ppc 아키텍쳐 버전의 Cent","tags":null,"title":"PowerPC64 환경에서 CentOS7","uri":"https://cybertramp.net/2019/10/powerppc/","year":"2019"}],"tags":[]}