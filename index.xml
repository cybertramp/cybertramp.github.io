<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Cybertramp Blog</title>
    <link>https://cybertramp.net/</link>
    <description>Recent content on Cybertramp Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-kr</language>
    <lastBuildDate>Thu, 03 Feb 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://cybertramp.net/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>빌드가 안될때 해결법</title>
      <link>https://cybertramp.net/computer_language/python3/pyqt5/210116_001/</link>
      <pubDate>Sat, 16 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://cybertramp.net/computer_language/python3/pyqt5/210116_001/</guid>
      <description>PyQT5 빌드가 안될때 해결하는 방법이다. 빌드시 상대 경로가 문제인 경우에서의 해결 방법.
3699 WARNING: lib not found: api-ms-win-core-libraryloader-l1-2-0.dll dependency of C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.2288.0_x64__qbz5n2kfra8p0\python.exe 3704 WARNING: lib not found: api-ms-win-core-processthreads-l1-1-0.dll dependency of C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.2288.0_x64__qbz5n2kfra8p0\python.exe 3706 WARNING: lib not found: api-ms-win-core-util-l1-1-0.dll dependency of C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.2288.0_x64__qbz5n2kfra8p0\python.exe 3708 WARNING: lib not found: api-ms-win-core-errorhandling-l1-1-0.dll dependency of C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.2288.0_x64__qbz5n2kfra8p0\python.exe 3712 WARNING: lib not found: api-ms-win-core-sysinfo-l1-1-0.dll dependency of C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.2288.0_x64__qbz5n2kfra8p0\python.exe 3715 WARNING: lib not found: api-ms-win-core-interlocked-l1-1-0.dll dependency of C:\Program Files\WindowsApps\PythonSoftwareFoundation.</description>
    </item>
    
    <item>
      <title>WezTerm Configure</title>
      <link>https://cybertramp.net/windows/20220203_001/</link>
      <pubDate>Thu, 03 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>https://cybertramp.net/windows/20220203_001/</guid>
      <description>Wez&amp;rsquo;s Terminal Emulator의 Config file 이다.
lua 언어로 되어 있으며, 윈도우에서의 설정 파일 기본 위치는 C:\Program Files\WezTerm\wezterm.lua 이다.
설정 파일 참고: [참고](Lua Reference - Wez&amp;rsquo;s Terminal Emulator (wezfurlong.org))
아래는 내가 사용하는 Config 파일이다. (20220203 기준)
local wezterm = require &amp;#39;wezterm&amp;#39;; return { default_prog = {&amp;#34;C:\\Windows\\system32\\wsl.exe&amp;#34;, &amp;#34;-d&amp;#34;, &amp;#34;Ubuntu-20.04&amp;#34;}, font = wezterm.font(&amp;#34;D2Coding&amp;#34;), font_size = 10.0, color_scheme = &amp;#34;Dracula&amp;#34;, launch_menu = { { label = &amp;#34;Debugging PC&amp;#34;, args = {&amp;#34;ssh&amp;#34;,&amp;#34;root@10.10.13.22&amp;#34;} }, { label = &amp;#34;DQ Server&amp;#34;, args = {&amp;#34;ssh&amp;#34;,&amp;#34;root@10.</description>
    </item>
    
    <item>
      <title>GoLang 설치</title>
      <link>https://cybertramp.net/computer_language/golang/220119_001/</link>
      <pubDate>Wed, 19 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://cybertramp.net/computer_language/golang/220119_001/</guid>
      <description>Version: 1.17.6을 설치하는 방법이다.
  다운 및 설치
# wget sudo -i mkdir go; cd go wget https://go.dev/dl/go1.17.6.linux-amd64.tar.gz rm -rf /usr/local/go &amp;amp;&amp;amp; tar -C /usr/local -xzf go1.17.6.linux-amd64.tar.gz exit go version   프로젝트 생성 &amp;amp; 셋업
cd {project dict} go mod init {package name} go mod tidy go build   Compile
GOOS=linux GOARCH=amd64 go build -v xxxx.go GOOS=windows GOARCH=amd64 go build -v xxxx.go    </description>
    </item>
    
    <item>
      <title>해결하기 - too many open files; retrying in 1s</title>
      <link>https://cybertramp.net/computer_language/golang/211107_001/</link>
      <pubDate>Sun, 07 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://cybertramp.net/computer_language/golang/211107_001/</guid>
      <description>Go로 http 라이브러리를 사용하여 API 서버를 만들었으나, 테스트로 1일 동안 여러 장비에서 API를 주고 받았는데, 문제가 생겨있었다.
2021/10/30 04:26:49 http: Accept error: accept tcp [::]:4547: accept4: too many open files; retrying in 1s 2021/10/30 04:26:50 http: Accept error: accept tcp [::]:4547: accept4: too many open files; retrying in 1s 2021/10/30 04:26:51 http: Accept error: accept tcp [::]:4547: accept4: too many open files; retrying in 1s 2021/10/30 04:26:52 http: Accept error: accept tcp [::]:4547: accept4: too many open files; retrying in 1s 2021/10/30 04:26:53 http: Accept error: accept tcp [::]:4547: accept4: too many open files; retrying in 1s 2021/10/30 04:26:54 http: Accept error: accept tcp [::]:4547: accept4: too many open files; retrying in 1s 2021/10/30 04:26:55 http: Accept error: accept tcp [::]:4547: accept4: too many open files; retrying in 1s 2021/10/30 04:26:56 http: Accept error: accept tcp [::]:4547: accept4: too many open files; retrying in 1s 파일을 너무 많이 열어서 문제가 생긴건데, 원인이 뭔지 몰랐다.</description>
    </item>
    
    <item>
      <title>Build - nvme-cli</title>
      <link>https://cybertramp.net/linux/20210822_003/</link>
      <pubDate>Sun, 22 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://cybertramp.net/linux/20210822_003/</guid>
      <description>1. 클론/컴파일/설치 git clone https://github.com/linux-nvme/nvme-cli.git cd nvme-cli make make install # RUN nvme --version 2. 커스텀 플러그인 추가 플러그인은 todd라는 명으로 추가한다.
mkdir -p plugins/todd   plugins/todd/todd-nvme.h
#undef CMD_INC_FILE #define CMD_INC_FILE plugins/todd/todd-nvme  #if !defined(TODD_NVME) || defined(CMD_HEADER_MULTI_READ) #define TODD_NVME  #include &amp;#34;cmd.h&amp;#34;#include &amp;lt;stdio.h&amp;gt; PLUGIN(NAME(&amp;#34;todd&amp;#34;, &amp;#34;Todd plugin&amp;#34;), COMMAND_LIST( ENTRY(&amp;#34;list&amp;#34;,&amp;#34;List available FADU devices&amp;#34;,todd_list) ) ); #endif  #include &amp;#34;define_cmd.h&amp;#34;  plugins/todd/todd-nvme.c
#include &amp;#34;nvme.h&amp;#34; #define CREATE_CMD #include &amp;#34;todd-nvme.h&amp;#34; static int todd_list(int argc, char **argv, struct command *cmd, struct plugin *plugin){ printf(&amp;#34;Hello world!</description>
    </item>
    
    <item>
      <title>Installation - ElasticSearch</title>
      <link>https://cybertramp.net/linux/installation/20210822_005/</link>
      <pubDate>Sun, 22 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://cybertramp.net/linux/installation/20210822_005/</guid>
      <description>주의   service로 동작하므로 wsl에서 테스트 불가
  참고  https://www.digitalocean.com/community/tutorials/how-to-install-elasticsearch-logstash-and-kibana-elastic-stack-on-ubuntu-20-04    $ curl -fsSL https://artifacts.elastic.co/GPG-KEY-elasticsearch | sudo apt-key add - $ echo &amp;#34;deb https://artifacts.elastic.co/packages/7.x/apt stable main&amp;#34; | sudo tee -a /etc/apt/sources.list.d/elastic-7.x.list $ sudo apt update $ sudo apt install elasticsearch $ sudo vi /etc/elasticsearch/elasticsearch.yml /etc/elasticsearch/elasticsearch.yml
# ---------------------------------- Network -----------------------------------## Set the bind address to a specific IP (IPv4 or IPv6):#network.host:localhost$ sudo systemctl start elasticsearch $ sudo systemctl enable elasticsearch   Request Test</description>
    </item>
    
    <item>
      <title>Installation - gitea(docker)</title>
      <link>https://cybertramp.net/linux/installation/20210822_004/</link>
      <pubDate>Sun, 22 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://cybertramp.net/linux/installation/20210822_004/</guid>
      <description>참고
 https://docs.docker.com/compose/install/ https://docs.gitea.io/en-us/install-with-docker/  apt install docker docker.io -y sudo curl -L &amp;#34;[https://github.com/docker/compose/releases/download/1.26.0/docker-compose-$(uname -s)-$(uname -m)](https://github.com/docker/compose/releases/download/1.26.0/docker-compose-$(uname%20-s)-$(uname%20-m))&amp;#34; -o /usr/local/bin/docker-compose sudo chmod +x /usr/local/bin/docker-compose mkdir dockers cd dockers vi docker-compose.yml docker-compose.yml
version:&amp;#34;2&amp;#34;networks:gitea:external:falseservices:server:image:gitea/gitea:latestenvironment:- USER\_UID=1000- USER\_GID=1000restart:alwaysnetworks:- giteavolumes:- ./gitea:/data- /etc/timezone:/etc/timezone:ro- /etc/localtime:/etc/localtime:roports:- &amp;#34;3000:3000&amp;#34;- &amp;#34;2222:22&amp;#34;docker-compose up docker-compose start </description>
    </item>
    
    <item>
      <title>Installation - Mongo DB</title>
      <link>https://cybertramp.net/linux/installation/20210822_001/</link>
      <pubDate>Sun, 22 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://cybertramp.net/linux/installation/20210822_001/</guid>
      <description>참고
1. 키 추가 wget -qO - https://www.mongodb.org/static/pgp/server-4.2.asc | sudo apt-key add - 2. 레포지토리 추가 echo &amp;#34;deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu bionic/mongodb-org/4.2 multiverse&amp;#34; | sudo tee /etc/apt/sources.list.d/mongodb-org-4.2.list 3. 패키지 최신화 및 설치 sudo apt update sudo apt-get install -y mongodb-org 4. 서비스 시작 service mongod start service mongod enable service mongod status 5. 관리자 계정 생성 MongoDB CLI를 통해 인증을 위한 관리자 계정을 생성한다.
mongo
use admin db.createUser( { user: &amp;#34;원하는 계정 이름&amp;#34;, pwd: &amp;#34;패스워드&amp;#34;, roles: [&amp;#39;root&amp;#39;] } ) 6.</description>
    </item>
    
    <item>
      <title>신기한 게임 Vampire Survivors</title>
      <link>https://cybertramp.net/interesting_things/20220220_001/</link>
      <pubDate>Fri, 19 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://cybertramp.net/interesting_things/20220220_001/</guid>
      <description>최근에 Vampire Survivors 라는 게임이 Hot 하다고 들었다. 하지만 그냥 인디 게임이라 생각이 들어 지나치고 있었다. 그러다가 유튜브 알고리즘에 보여 내 눈에 들어오게 되었고 저렴한 금액에 구입을 하였고 게임을 해봤다.
게임에 대한 조그만한 이야기.. 게임은 로그라이크 형식의 게임인데, 바인딩 오브 아이작이라는 게임과 비슷하다. 적들이 사방에서 계속 Gen되며, 자동으로 나가는 공격으로 방향키만 조작하여 적들을 죽인다.
죽인 적에서는 경험치가 나오고 그 경험치를 먹고 레벨업을 하게되면 내가 원하는 무기트리와 버프 트리를 선택할 수 있다.</description>
    </item>
    
    <item>
      <title>zip file permission</title>
      <link>https://cybertramp.net/linux/20200903_001/</link>
      <pubDate>Thu, 03 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://cybertramp.net/linux/20200903_001/</guid>
      <description>원래 tar는 permission을 그대로 가지고 묶고 zip은 permission을 포함하지 않고 압축을 했음.
하지만 info-ZIP 3.0 부터 file/dirs UNIX permission과 UID/GID 소유권을 포함 할 수 있게 되었음. unix와 Windows NT에서는 보존하여 압축, 압축 해제 가능하나 Windows에서는 불가능함.
 unzip의 관련 내용
https://unix.stackexchange.com/questions/313656/preserving-permissions-while-zipping
Dates, times and permissions of stored directories are not restoredexcept under Unix. (On Windows NT and successors, timestamps are nowrestored.)   permission 포함 압축 및 해제 옵션은 없어도 기본 적용</description>
    </item>
    
    <item>
      <title>QT Framework</title>
      <link>https://cybertramp.net/computer_language/c_cpp/qt5/20200901_001/</link>
      <pubDate>Tue, 01 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://cybertramp.net/computer_language/c_cpp/qt5/20200901_001/</guid>
      <description>Qt Qt는 GUI 프로그램 개발에 널리 쓰이는 크로스 플랫폼 프레임워크. Qt는 한번쓰고 여러 플랫폼용으로 컴파일하는것을 메인으로 개발된 프레임워크이다.
  현재 버전
2020년 9월 기준 Qt 5.15와 Qt 4.11.1이 최신
  License
두가지 라이센스 방식이 존재
  Commercial License
외부에 코드를 공개하지 않고도 독점적인 SW 개발 가능
연간 구독요금이 $3950, UI 빌더 툴 별도(추가 연간 $999)
  GNU LGPL 버전 2.1
Qt 5.6(2016.03 Released) 까지까지 해당 라이센스였음</description>
    </item>
    
    <item>
      <title>Windows Terminal에서 시작 디렉토리 지정하기</title>
      <link>https://cybertramp.net/windows/20191123_001/</link>
      <pubDate>Sat, 23 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://cybertramp.net/windows/20191123_001/</guid>
      <description>Windows Terminal을 설치하고 실행하면 경로가 윈도우의 홈 디렉토리로 시작하게 된다. 작업하는데 매번 해당 경로를 타고 다시 이동해야하는 번거로움을 줄이기 위해 설정한다.
  기존 예제
기존에는 &amp;quot;startingDirectory&amp;quot; 속성이 없어서 터미널 실행시 아래와 같은 위치로 시작한다.
[설정된 속성]
{ &amp;#34;guid&amp;#34;: &amp;#34;{c6eaf9f4-32a7-5fdc-b5cf-066e8a4b1e40}&amp;#34;, &amp;#34;hidden&amp;#34;: false, &amp;#34;name&amp;#34;: &amp;#34;Ubuntu-18.04&amp;#34;, &amp;#34;source&amp;#34;: &amp;#34;Windows.Terminal.Wsl&amp;#34; }, [터미널 시작시]
paran_son@pandorica:/mnt/c/Users/paran_son$   위치를 WSL 내 사용자 홈 디렉토리로 변경
 여기서 home 디렉토리 아래 사용자명은 WSL 내 사용자 명으로 설정해주어야 한다.</description>
    </item>
    
    <item>
      <title>Dlib 설치 &amp; 연동</title>
      <link>https://cybertramp.net/linux/installation/20191028_001/</link>
      <pubDate>Mon, 28 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://cybertramp.net/linux/installation/20191028_001/</guid>
      <description>[1] Dlib 설치 사전 상태  opencv4 버전, Visual Studio community 2019가 설치되어 있음
 1. dlib 다운 공식페이지에서 다운로드 받고 압축풀기
2. Cmake 다운 &amp;amp; 실행 공식페이지에서 Bianry로 다운로드
cmake-3.16.0-win64-x64\bin에서 cmake-gui.exe실행
 내가 다운로드 받은 것은 x64용이다.
   소스코드 경로 잡아주기
  바이너리 빌드 위치 잡아주기
  Configure 클릭
  VIsual Studio 버전과 x64선택
  먼저 에러가 빨갛게 에러가 나겠지만 OpenCV 경로 지정이 잘못되서 그럴것이다.</description>
    </item>
    
    <item>
      <title>PowerPC64 환경에서 CentOS7</title>
      <link>https://cybertramp.net/linux/installation/20191027_001/</link>
      <pubDate>Sun, 27 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://cybertramp.net/linux/installation/20191027_001/</guid>
      <description>Ubuntu 환경 위에서 qemu-system-ppc를 통해 CentOS 7을 실행한다.
 하루를 삽질했다&amp;hellip;ㅠ
 1. 설치 1) CentOS7 minimal 다운로드 ppc 아키텍쳐 버전의 CentOS7은 다음 사이트에서 다운 받는다.
http://isoredirect.centos.org/altarch/7/isos/ppc64/
원하는 미러 사이트에서 CentOS-7-ppc64-Minimal-1908.iso을 내려 받으면된다.
 나는 http://mirror.xtom.com.hk/centos-altarch/7.7.1908/isos/ppc64/ 이 미러에서 받았다. 가장 빨랐다.
 2) qemu 설치   qemu 설치
sudo apt install qemu-kvm qemu virt-manager virt-viewer libvirt-bin -y   ppc용 설치
sudo apt install qemu-system-ppc openbios-ppc -y   3) 브릿지 설정   설치</description>
    </item>
    
  </channel>
</rss>
